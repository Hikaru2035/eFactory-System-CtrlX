// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVERSETTINGS_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_SERVERSETTINGS_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct ServerSettings;
struct ServerSettingsBuilder;
struct ServerSettingsT;

struct ServerSettingsT : public ::flatbuffers::NativeTable {
  typedef ServerSettings TableType;
  uint32_t serverIdlePingTimeout = 30000;
  uint32_t serverWaitResponseTimeout = 30000;
  uint32_t serverMaxMessageSize = 52428800;
  std::string debugAddress{};
  uint32_t serverMaxRtSize = 2097152;
  uint32_t serverEmulatedNvramSize = 122880;
  std::vector<std::string> experimentalFeatures{};
  uint16_t tcpPortFrontend = 2069;
  uint16_t tcpPortBackend = 2070;
  bool forceEmulatedNvram = false;
  uint32_t serverZmqHighWaterMark = 1000;
  uint32_t maxBulkRequest = 1000;
  uint32_t maxSortSize = 50000;
  uint32_t maxAliasDepth = 8;
};

struct ServerSettings FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ServerSettingsT NativeTableType;
  typedef ServerSettingsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_SERVERIDLEPINGTIMEOUT = 4,
    VT_SERVERWAITRESPONSETIMEOUT = 6,
    VT_SERVERMAXMESSAGESIZE = 8,
    VT_DEBUGADDRESS = 10,
    VT_SERVERMAXRTSIZE = 12,
    VT_SERVEREMULATEDNVRAMSIZE = 14,
    VT_EXPERIMENTALFEATURES = 16,
    VT_TCPPORTFRONTEND = 18,
    VT_TCPPORTBACKEND = 20,
    VT_FORCEEMULATEDNVRAM = 22,
    VT_SERVERZMQHIGHWATERMARK = 24,
    VT_MAXBULKREQUEST = 26,
    VT_MAXSORTSIZE = 28,
    VT_MAXALIASDEPTH = 30
  };
  /// after this time in milliseconds the broker send a ping
  /// to not used provider is send to test if provider is still alive
  uint32_t serverIdlePingTimeout() const {
    return GetField<uint32_t>(VT_SERVERIDLEPINGTIMEOUT, 30000);
  }
  bool mutate_serverIdlePingTimeout(uint32_t _serverIdlePingTimeout = 30000) {
    return SetField<uint32_t>(VT_SERVERIDLEPINGTIMEOUT, _serverIdlePingTimeout, 30000);
  }
  /// after this time in milliseconds a response from provider is expected
  /// if there is no answer a provider is assumed to be dead --> kick provider out of routing
  uint32_t serverWaitResponseTimeout() const {
    return GetField<uint32_t>(VT_SERVERWAITRESPONSETIMEOUT, 30000);
  }
  bool mutate_serverWaitResponseTimeout(uint32_t _serverWaitResponseTimeout = 30000) {
    return SetField<uint32_t>(VT_SERVERWAITRESPONSETIMEOUT, _serverWaitResponseTimeout, 30000);
  }
  /// maximum inbound message size in bytes
  uint32_t serverMaxMessageSize() const {
    return GetField<uint32_t>(VT_SERVERMAXMESSAGESIZE, 52428800);
  }
  bool mutate_serverMaxMessageSize(uint32_t _serverMaxMessageSize = 52428800) {
    return SetField<uint32_t>(VT_SERVERMAXMESSAGESIZE, _serverMaxMessageSize, 52428800);
  }
  /// Address to debug disconnect
  const ::flatbuffers::String *debugAddress() const {
    return GetPointer<const ::flatbuffers::String *>(VT_DEBUGADDRESS);
  }
  ::flatbuffers::String *mutable_debugAddress() {
    return GetPointer<::flatbuffers::String *>(VT_DEBUGADDRESS);
  }
  /// Maximum size of a RT area in bytes
  uint32_t serverMaxRtSize() const {
    return GetField<uint32_t>(VT_SERVERMAXRTSIZE, 2097152);
  }
  bool mutate_serverMaxRtSize(uint32_t _serverMaxRtSize = 2097152) {
    return SetField<uint32_t>(VT_SERVERMAXRTSIZE, _serverMaxRtSize, 2097152);
  }
  /// Emulated NVRam size in bytes if no real NVRAM is found
  /// Changes will be active after a restart of app.automationcore
  uint32_t serverEmulatedNvramSize() const {
    return GetField<uint32_t>(VT_SERVEREMULATEDNVRAMSIZE, 122880);
  }
  bool mutate_serverEmulatedNvramSize(uint32_t _serverEmulatedNvramSize = 122880) {
    return SetField<uint32_t>(VT_SERVEREMULATEDNVRAMSIZE, _serverEmulatedNvramSize, 122880);
  }
  /// Add the names of the experimental feature you want to enable here
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *experimentalFeatures() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_EXPERIMENTALFEATURES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mutable_experimentalFeatures() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_EXPERIMENTALFEATURES);
  }
  /// Used port for TCP frontend communication - Use value 0 to deactivate communication
  /// Takes effect after reboot of control
  uint16_t tcpPortFrontend() const {
    return GetField<uint16_t>(VT_TCPPORTFRONTEND, 2069);
  }
  bool mutate_tcpPortFrontend(uint16_t _tcpPortFrontend = 2069) {
    return SetField<uint16_t>(VT_TCPPORTFRONTEND, _tcpPortFrontend, 2069);
  }
  /// Used port for TCP backend communication - Use value 0 to deactivate communication
  /// Takes effect after reboot of control
  uint16_t tcpPortBackend() const {
    return GetField<uint16_t>(VT_TCPPORTBACKEND, 2070);
  }
  bool mutate_tcpPortBackend(uint16_t _tcpPortBackend = 2070) {
    return SetField<uint16_t>(VT_TCPPORTBACKEND, _tcpPortBackend, 2070);
  }
  /// Force emulation of NVRam even if there is a real NVRAM
  /// Size of NVRam is serverEmulatedNvramSize
  /// Changes will be active after reboot of control
  bool forceEmulatedNvram() const {
    return GetField<uint8_t>(VT_FORCEEMULATEDNVRAM, 0) != 0;
  }
  bool mutate_forceEmulatedNvram(bool _forceEmulatedNvram = 0) {
    return SetField<uint8_t>(VT_FORCEEMULATEDNVRAM, static_cast<uint8_t>(_forceEmulatedNvram), 0);
  }
  /// High water mark of ZMQ
  /// Takes effect after reboot of control
  uint32_t serverZmqHighWaterMark() const {
    return GetField<uint32_t>(VT_SERVERZMQHIGHWATERMARK, 1000);
  }
  bool mutate_serverZmqHighWaterMark(uint32_t _serverZmqHighWaterMark = 1000) {
    return SetField<uint32_t>(VT_SERVERZMQHIGHWATERMARK, _serverZmqHighWaterMark, 1000);
  }
  /// Number of requests per bulk
  /// If set to 0 - all requests will be single requests.
  /// If set to a value unequal to 0 - a bulk request will be
  /// splited to this count.
  uint32_t maxBulkRequest() const {
    return GetField<uint32_t>(VT_MAXBULKREQUEST, 1000);
  }
  bool mutate_maxBulkRequest(uint32_t _maxBulkRequest = 1000) {
    return SetField<uint32_t>(VT_MAXBULKREQUEST, _maxBulkRequest, 1000);
  }
  /// Maximum browse answer in bytes that are sorted in alphanumeric way in broker
  uint32_t maxSortSize() const {
    return GetField<uint32_t>(VT_MAXSORTSIZE, 50000);
  }
  bool mutate_maxSortSize(uint32_t _maxSortSize = 50000) {
    return SetField<uint32_t>(VT_MAXSORTSIZE, _maxSortSize, 50000);
  }
  /// Maximum alias depth: counts how often an alias can be replaced in one request
  uint32_t maxAliasDepth() const {
    return GetField<uint32_t>(VT_MAXALIASDEPTH, 8);
  }
  bool mutate_maxAliasDepth(uint32_t _maxAliasDepth = 8) {
    return SetField<uint32_t>(VT_MAXALIASDEPTH, _maxAliasDepth, 8);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_SERVERIDLEPINGTIMEOUT, 4) &&
           VerifyField<uint32_t>(verifier, VT_SERVERWAITRESPONSETIMEOUT, 4) &&
           VerifyField<uint32_t>(verifier, VT_SERVERMAXMESSAGESIZE, 4) &&
           VerifyOffset(verifier, VT_DEBUGADDRESS) &&
           verifier.VerifyString(debugAddress()) &&
           VerifyField<uint32_t>(verifier, VT_SERVERMAXRTSIZE, 4) &&
           VerifyField<uint32_t>(verifier, VT_SERVEREMULATEDNVRAMSIZE, 4) &&
           VerifyOffset(verifier, VT_EXPERIMENTALFEATURES) &&
           verifier.VerifyVector(experimentalFeatures()) &&
           verifier.VerifyVectorOfStrings(experimentalFeatures()) &&
           VerifyField<uint16_t>(verifier, VT_TCPPORTFRONTEND, 2) &&
           VerifyField<uint16_t>(verifier, VT_TCPPORTBACKEND, 2) &&
           VerifyField<uint8_t>(verifier, VT_FORCEEMULATEDNVRAM, 1) &&
           VerifyField<uint32_t>(verifier, VT_SERVERZMQHIGHWATERMARK, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAXBULKREQUEST, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAXSORTSIZE, 4) &&
           VerifyField<uint32_t>(verifier, VT_MAXALIASDEPTH, 4) &&
           verifier.EndTable();
  }
  ServerSettingsT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ServerSettingsT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ServerSettings> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ServerSettingsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ServerSettingsBuilder {
  typedef ServerSettings Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_serverIdlePingTimeout(uint32_t serverIdlePingTimeout) {
    fbb_.AddElement<uint32_t>(ServerSettings::VT_SERVERIDLEPINGTIMEOUT, serverIdlePingTimeout, 30000);
  }
  void add_serverWaitResponseTimeout(uint32_t serverWaitResponseTimeout) {
    fbb_.AddElement<uint32_t>(ServerSettings::VT_SERVERWAITRESPONSETIMEOUT, serverWaitResponseTimeout, 30000);
  }
  void add_serverMaxMessageSize(uint32_t serverMaxMessageSize) {
    fbb_.AddElement<uint32_t>(ServerSettings::VT_SERVERMAXMESSAGESIZE, serverMaxMessageSize, 52428800);
  }
  void add_debugAddress(::flatbuffers::Offset<::flatbuffers::String> debugAddress) {
    fbb_.AddOffset(ServerSettings::VT_DEBUGADDRESS, debugAddress);
  }
  void add_serverMaxRtSize(uint32_t serverMaxRtSize) {
    fbb_.AddElement<uint32_t>(ServerSettings::VT_SERVERMAXRTSIZE, serverMaxRtSize, 2097152);
  }
  void add_serverEmulatedNvramSize(uint32_t serverEmulatedNvramSize) {
    fbb_.AddElement<uint32_t>(ServerSettings::VT_SERVEREMULATEDNVRAMSIZE, serverEmulatedNvramSize, 122880);
  }
  void add_experimentalFeatures(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> experimentalFeatures) {
    fbb_.AddOffset(ServerSettings::VT_EXPERIMENTALFEATURES, experimentalFeatures);
  }
  void add_tcpPortFrontend(uint16_t tcpPortFrontend) {
    fbb_.AddElement<uint16_t>(ServerSettings::VT_TCPPORTFRONTEND, tcpPortFrontend, 2069);
  }
  void add_tcpPortBackend(uint16_t tcpPortBackend) {
    fbb_.AddElement<uint16_t>(ServerSettings::VT_TCPPORTBACKEND, tcpPortBackend, 2070);
  }
  void add_forceEmulatedNvram(bool forceEmulatedNvram) {
    fbb_.AddElement<uint8_t>(ServerSettings::VT_FORCEEMULATEDNVRAM, static_cast<uint8_t>(forceEmulatedNvram), 0);
  }
  void add_serverZmqHighWaterMark(uint32_t serverZmqHighWaterMark) {
    fbb_.AddElement<uint32_t>(ServerSettings::VT_SERVERZMQHIGHWATERMARK, serverZmqHighWaterMark, 1000);
  }
  void add_maxBulkRequest(uint32_t maxBulkRequest) {
    fbb_.AddElement<uint32_t>(ServerSettings::VT_MAXBULKREQUEST, maxBulkRequest, 1000);
  }
  void add_maxSortSize(uint32_t maxSortSize) {
    fbb_.AddElement<uint32_t>(ServerSettings::VT_MAXSORTSIZE, maxSortSize, 50000);
  }
  void add_maxAliasDepth(uint32_t maxAliasDepth) {
    fbb_.AddElement<uint32_t>(ServerSettings::VT_MAXALIASDEPTH, maxAliasDepth, 8);
  }
  explicit ServerSettingsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ServerSettings> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ServerSettings>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ServerSettings> CreateServerSettings(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t serverIdlePingTimeout = 30000,
    uint32_t serverWaitResponseTimeout = 30000,
    uint32_t serverMaxMessageSize = 52428800,
    ::flatbuffers::Offset<::flatbuffers::String> debugAddress = 0,
    uint32_t serverMaxRtSize = 2097152,
    uint32_t serverEmulatedNvramSize = 122880,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> experimentalFeatures = 0,
    uint16_t tcpPortFrontend = 2069,
    uint16_t tcpPortBackend = 2070,
    bool forceEmulatedNvram = false,
    uint32_t serverZmqHighWaterMark = 1000,
    uint32_t maxBulkRequest = 1000,
    uint32_t maxSortSize = 50000,
    uint32_t maxAliasDepth = 8) {
  ServerSettingsBuilder builder_(_fbb);
  builder_.add_maxAliasDepth(maxAliasDepth);
  builder_.add_maxSortSize(maxSortSize);
  builder_.add_maxBulkRequest(maxBulkRequest);
  builder_.add_serverZmqHighWaterMark(serverZmqHighWaterMark);
  builder_.add_experimentalFeatures(experimentalFeatures);
  builder_.add_serverEmulatedNvramSize(serverEmulatedNvramSize);
  builder_.add_serverMaxRtSize(serverMaxRtSize);
  builder_.add_debugAddress(debugAddress);
  builder_.add_serverMaxMessageSize(serverMaxMessageSize);
  builder_.add_serverWaitResponseTimeout(serverWaitResponseTimeout);
  builder_.add_serverIdlePingTimeout(serverIdlePingTimeout);
  builder_.add_tcpPortBackend(tcpPortBackend);
  builder_.add_tcpPortFrontend(tcpPortFrontend);
  builder_.add_forceEmulatedNvram(forceEmulatedNvram);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ServerSettings> CreateServerSettingsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t serverIdlePingTimeout = 30000,
    uint32_t serverWaitResponseTimeout = 30000,
    uint32_t serverMaxMessageSize = 52428800,
    const char *debugAddress = nullptr,
    uint32_t serverMaxRtSize = 2097152,
    uint32_t serverEmulatedNvramSize = 122880,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *experimentalFeatures = nullptr,
    uint16_t tcpPortFrontend = 2069,
    uint16_t tcpPortBackend = 2070,
    bool forceEmulatedNvram = false,
    uint32_t serverZmqHighWaterMark = 1000,
    uint32_t maxBulkRequest = 1000,
    uint32_t maxSortSize = 50000,
    uint32_t maxAliasDepth = 8) {
  auto debugAddress__ = debugAddress ? _fbb.CreateString(debugAddress) : 0;
  auto experimentalFeatures__ = experimentalFeatures ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*experimentalFeatures) : 0;
  return comm::datalayer::CreateServerSettings(
      _fbb,
      serverIdlePingTimeout,
      serverWaitResponseTimeout,
      serverMaxMessageSize,
      debugAddress__,
      serverMaxRtSize,
      serverEmulatedNvramSize,
      experimentalFeatures__,
      tcpPortFrontend,
      tcpPortBackend,
      forceEmulatedNvram,
      serverZmqHighWaterMark,
      maxBulkRequest,
      maxSortSize,
      maxAliasDepth);
}

::flatbuffers::Offset<ServerSettings> CreateServerSettings(::flatbuffers::FlatBufferBuilder &_fbb, const ServerSettingsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ServerSettingsT *ServerSettings::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ServerSettingsT>(new ServerSettingsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ServerSettings::UnPackTo(ServerSettingsT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = serverIdlePingTimeout(); _o->serverIdlePingTimeout = _e; }
  { auto _e = serverWaitResponseTimeout(); _o->serverWaitResponseTimeout = _e; }
  { auto _e = serverMaxMessageSize(); _o->serverMaxMessageSize = _e; }
  { auto _e = debugAddress(); if (_e) _o->debugAddress = _e->str(); }
  { auto _e = serverMaxRtSize(); _o->serverMaxRtSize = _e; }
  { auto _e = serverEmulatedNvramSize(); _o->serverEmulatedNvramSize = _e; }
  { auto _e = experimentalFeatures(); if (_e) { _o->experimentalFeatures.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->experimentalFeatures[_i] = _e->Get(_i)->str(); } } else { _o->experimentalFeatures.resize(0); } }
  { auto _e = tcpPortFrontend(); _o->tcpPortFrontend = _e; }
  { auto _e = tcpPortBackend(); _o->tcpPortBackend = _e; }
  { auto _e = forceEmulatedNvram(); _o->forceEmulatedNvram = _e; }
  { auto _e = serverZmqHighWaterMark(); _o->serverZmqHighWaterMark = _e; }
  { auto _e = maxBulkRequest(); _o->maxBulkRequest = _e; }
  { auto _e = maxSortSize(); _o->maxSortSize = _e; }
  { auto _e = maxAliasDepth(); _o->maxAliasDepth = _e; }
}

inline ::flatbuffers::Offset<ServerSettings> ServerSettings::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ServerSettingsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateServerSettings(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ServerSettings> CreateServerSettings(::flatbuffers::FlatBufferBuilder &_fbb, const ServerSettingsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ServerSettingsT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _serverIdlePingTimeout = _o->serverIdlePingTimeout;
  auto _serverWaitResponseTimeout = _o->serverWaitResponseTimeout;
  auto _serverMaxMessageSize = _o->serverMaxMessageSize;
  auto _debugAddress = _o->debugAddress.empty() ? 0 : _fbb.CreateString(_o->debugAddress);
  auto _serverMaxRtSize = _o->serverMaxRtSize;
  auto _serverEmulatedNvramSize = _o->serverEmulatedNvramSize;
  auto _experimentalFeatures = _o->experimentalFeatures.size() ? _fbb.CreateVectorOfStrings(_o->experimentalFeatures) : 0;
  auto _tcpPortFrontend = _o->tcpPortFrontend;
  auto _tcpPortBackend = _o->tcpPortBackend;
  auto _forceEmulatedNvram = _o->forceEmulatedNvram;
  auto _serverZmqHighWaterMark = _o->serverZmqHighWaterMark;
  auto _maxBulkRequest = _o->maxBulkRequest;
  auto _maxSortSize = _o->maxSortSize;
  auto _maxAliasDepth = _o->maxAliasDepth;
  return comm::datalayer::CreateServerSettings(
      _fbb,
      _serverIdlePingTimeout,
      _serverWaitResponseTimeout,
      _serverMaxMessageSize,
      _debugAddress,
      _serverMaxRtSize,
      _serverEmulatedNvramSize,
      _experimentalFeatures,
      _tcpPortFrontend,
      _tcpPortBackend,
      _forceEmulatedNvram,
      _serverZmqHighWaterMark,
      _maxBulkRequest,
      _maxSortSize,
      _maxAliasDepth);
}

inline const comm::datalayer::ServerSettings *GetServerSettings(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::ServerSettings>(buf);
}

inline const comm::datalayer::ServerSettings *GetSizePrefixedServerSettings(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::ServerSettings>(buf);
}

inline ServerSettings *GetMutableServerSettings(void *buf) {
  return ::flatbuffers::GetMutableRoot<ServerSettings>(buf);
}

inline comm::datalayer::ServerSettings *GetMutableSizePrefixedServerSettings(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::ServerSettings>(buf);
}

inline bool VerifyServerSettingsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::ServerSettings>(nullptr);
}

inline bool VerifySizePrefixedServerSettingsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::ServerSettings>(nullptr);
}

inline void FinishServerSettingsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::ServerSettings> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedServerSettingsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::ServerSettings> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::ServerSettingsT> UnPackServerSettings(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ServerSettingsT>(GetServerSettings(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::ServerSettingsT> UnPackSizePrefixedServerSettings(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ServerSettingsT>(GetSizePrefixedServerSettings(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_SERVERSETTINGS_COMM_DATALAYER_H_
