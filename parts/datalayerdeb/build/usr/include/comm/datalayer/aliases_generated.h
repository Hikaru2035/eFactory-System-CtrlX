// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ALIASES_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_ALIASES_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

#include "alias_group_generated.h"

namespace comm {
namespace datalayer {

struct Aliases;
struct AliasesBuilder;
struct AliasesT;

struct AliasesT : public ::flatbuffers::NativeTable {
  typedef Aliases TableType;
  std::vector<std::unique_ptr<comm::datalayer::AliasGroupT>> groups{};
  AliasesT() = default;
  AliasesT(const AliasesT &o);
  AliasesT(AliasesT&&) FLATBUFFERS_NOEXCEPT = default;
  AliasesT &operator=(AliasesT o) FLATBUFFERS_NOEXCEPT;
};

struct Aliases FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AliasesT NativeTableType;
  typedef AliasesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GROUPS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::AliasGroup>> *groups() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::AliasGroup>> *>(VT_GROUPS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::AliasGroup>> *mutable_groups() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::AliasGroup>> *>(VT_GROUPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GROUPS) &&
           verifier.VerifyVector(groups()) &&
           verifier.VerifyVectorOfTables(groups()) &&
           verifier.EndTable();
  }
  AliasesT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AliasesT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Aliases> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AliasesT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AliasesBuilder {
  typedef Aliases Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_groups(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::AliasGroup>>> groups) {
    fbb_.AddOffset(Aliases::VT_GROUPS, groups);
  }
  explicit AliasesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Aliases> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Aliases>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Aliases> CreateAliases(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::AliasGroup>>> groups = 0) {
  AliasesBuilder builder_(_fbb);
  builder_.add_groups(groups);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Aliases> CreateAliasesDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<comm::datalayer::AliasGroup>> *groups = nullptr) {
  auto groups__ = groups ? _fbb.CreateVectorOfSortedTables<comm::datalayer::AliasGroup>(groups) : 0;
  return comm::datalayer::CreateAliases(
      _fbb,
      groups__);
}

::flatbuffers::Offset<Aliases> CreateAliases(::flatbuffers::FlatBufferBuilder &_fbb, const AliasesT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AliasesT::AliasesT(const AliasesT &o) {
  groups.reserve(o.groups.size());
  for (const auto &groups_ : o.groups) { groups.emplace_back((groups_) ? new comm::datalayer::AliasGroupT(*groups_) : nullptr); }
}

inline AliasesT &AliasesT::operator=(AliasesT o) FLATBUFFERS_NOEXCEPT {
  std::swap(groups, o.groups);
  return *this;
}

inline AliasesT *Aliases::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AliasesT>(new AliasesT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Aliases::UnPackTo(AliasesT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = groups(); if (_e) { _o->groups.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->groups[_i]) { _e->Get(_i)->UnPackTo(_o->groups[_i].get(), _resolver); } else { _o->groups[_i] = std::unique_ptr<comm::datalayer::AliasGroupT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->groups.resize(0); } }
}

inline ::flatbuffers::Offset<Aliases> Aliases::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AliasesT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAliases(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Aliases> CreateAliases(::flatbuffers::FlatBufferBuilder &_fbb, const AliasesT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AliasesT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _groups = _o->groups.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::AliasGroup>> (_o->groups.size(), [](size_t i, _VectorArgs *__va) { return CreateAliasGroup(*__va->__fbb, __va->__o->groups[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::CreateAliases(
      _fbb,
      _groups);
}

inline const comm::datalayer::Aliases *GetAliases(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::Aliases>(buf);
}

inline const comm::datalayer::Aliases *GetSizePrefixedAliases(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::Aliases>(buf);
}

inline Aliases *GetMutableAliases(void *buf) {
  return ::flatbuffers::GetMutableRoot<Aliases>(buf);
}

inline comm::datalayer::Aliases *GetMutableSizePrefixedAliases(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::Aliases>(buf);
}

inline bool VerifyAliasesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Aliases>(nullptr);
}

inline bool VerifySizePrefixedAliasesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Aliases>(nullptr);
}

inline void FinishAliasesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::Aliases> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAliasesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::Aliases> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::AliasesT> UnPackAliases(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::AliasesT>(GetAliases(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::AliasesT> UnPackSizePrefixedAliases(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::AliasesT>(GetSizePrefixedAliases(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_ALIASES_COMM_DATALAYER_H_
