// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_FLATCARGUMENTS_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_FLATCARGUMENTS_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct FlatcArguments;
struct FlatcArgumentsBuilder;
struct FlatcArgumentsT;

struct FlatcArgumentsT : public ::flatbuffers::NativeTable {
  typedef FlatcArguments TableType;
  std::string name{};
  std::vector<std::string> addresses{};
  std::vector<std::string> options{};
};

struct FlatcArguments FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef FlatcArgumentsT NativeTableType;
  typedef FlatcArgumentsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ADDRESSES = 6,
    VT_OPTIONS = 8
  };
  /// name of the created result
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  /// datalayer type addresses which should be compiled
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *addresses() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ADDRESSES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mutable_addresses() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_ADDRESSES);
  }
  /// flatc compiler options
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *options() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_OPTIONS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mutable_options() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_OPTIONS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffsetRequired(verifier, VT_ADDRESSES) &&
           verifier.VerifyVector(addresses()) &&
           verifier.VerifyVectorOfStrings(addresses()) &&
           VerifyOffsetRequired(verifier, VT_OPTIONS) &&
           verifier.VerifyVector(options()) &&
           verifier.VerifyVectorOfStrings(options()) &&
           verifier.EndTable();
  }
  FlatcArgumentsT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(FlatcArgumentsT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<FlatcArguments> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const FlatcArgumentsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct FlatcArgumentsBuilder {
  typedef FlatcArguments Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(FlatcArguments::VT_NAME, name);
  }
  void add_addresses(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> addresses) {
    fbb_.AddOffset(FlatcArguments::VT_ADDRESSES, addresses);
  }
  void add_options(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> options) {
    fbb_.AddOffset(FlatcArguments::VT_OPTIONS, options);
  }
  explicit FlatcArgumentsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<FlatcArguments> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<FlatcArguments>(end);
    fbb_.Required(o, FlatcArguments::VT_NAME);
    fbb_.Required(o, FlatcArguments::VT_ADDRESSES);
    fbb_.Required(o, FlatcArguments::VT_OPTIONS);
    return o;
  }
};

inline ::flatbuffers::Offset<FlatcArguments> CreateFlatcArguments(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> addresses = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> options = 0) {
  FlatcArgumentsBuilder builder_(_fbb);
  builder_.add_options(options);
  builder_.add_addresses(addresses);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<FlatcArguments> CreateFlatcArgumentsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *addresses = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *options = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto addresses__ = addresses ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*addresses) : 0;
  auto options__ = options ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*options) : 0;
  return comm::datalayer::CreateFlatcArguments(
      _fbb,
      name__,
      addresses__,
      options__);
}

::flatbuffers::Offset<FlatcArguments> CreateFlatcArguments(::flatbuffers::FlatBufferBuilder &_fbb, const FlatcArgumentsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline FlatcArgumentsT *FlatcArguments::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<FlatcArgumentsT>(new FlatcArgumentsT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void FlatcArguments::UnPackTo(FlatcArgumentsT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = addresses(); if (_e) { _o->addresses.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->addresses[_i] = _e->Get(_i)->str(); } } else { _o->addresses.resize(0); } }
  { auto _e = options(); if (_e) { _o->options.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->options[_i] = _e->Get(_i)->str(); } } else { _o->options.resize(0); } }
}

inline ::flatbuffers::Offset<FlatcArguments> FlatcArguments::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const FlatcArgumentsT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateFlatcArguments(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<FlatcArguments> CreateFlatcArguments(::flatbuffers::FlatBufferBuilder &_fbb, const FlatcArgumentsT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const FlatcArgumentsT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _fbb.CreateString(_o->name);
  auto _addresses = _fbb.CreateVectorOfStrings(_o->addresses);
  auto _options = _fbb.CreateVectorOfStrings(_o->options);
  return comm::datalayer::CreateFlatcArguments(
      _fbb,
      _name,
      _addresses,
      _options);
}

inline const comm::datalayer::FlatcArguments *GetFlatcArguments(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::FlatcArguments>(buf);
}

inline const comm::datalayer::FlatcArguments *GetSizePrefixedFlatcArguments(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::FlatcArguments>(buf);
}

inline FlatcArguments *GetMutableFlatcArguments(void *buf) {
  return ::flatbuffers::GetMutableRoot<FlatcArguments>(buf);
}

inline comm::datalayer::FlatcArguments *GetMutableSizePrefixedFlatcArguments(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::FlatcArguments>(buf);
}

inline bool VerifyFlatcArgumentsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::FlatcArguments>(nullptr);
}

inline bool VerifySizePrefixedFlatcArgumentsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::FlatcArguments>(nullptr);
}

inline void FinishFlatcArgumentsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::FlatcArguments> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedFlatcArgumentsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::FlatcArguments> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::FlatcArgumentsT> UnPackFlatcArguments(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::FlatcArgumentsT>(GetFlatcArguments(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::FlatcArgumentsT> UnPackSizePrefixedFlatcArguments(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::FlatcArgumentsT>(GetSizePrefixedFlatcArguments(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_FLATCARGUMENTS_COMM_DATALAYER_H_
