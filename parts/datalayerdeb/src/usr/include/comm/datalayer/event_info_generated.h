// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_EVENTINFO_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_EVENTINFO_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct EventInfo;
struct EventInfoBuilder;
struct EventInfoT;

struct EventInfoT : public ::flatbuffers::NativeTable {
  typedef EventInfo TableType;
  std::string eventType{};
  std::string sourceNode{};
  std::string sourceName{};
  uint64_t timestamp = 0;
  uint64_t sequenceNumber = 0;
};

struct EventInfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef EventInfoT NativeTableType;
  typedef EventInfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EVENTTYPE = 4,
    VT_SOURCENODE = 6,
    VT_SOURCENAME = 8,
    VT_TIMESTAMP = 10,
    VT_SEQUENCENUMBER = 12
  };
  /// The type of event, that is transfered.
  /// E.g.: "types/events/ExampleEvent"
  const ::flatbuffers::String *eventType() const {
    return GetPointer<const ::flatbuffers::String *>(VT_EVENTTYPE);
  }
  ::flatbuffers::String *mutable_eventType() {
    return GetPointer<::flatbuffers::String *>(VT_EVENTTYPE);
  }
  /// The node, that fired the event.
  /// E.g.: diagnosis/warning
  const ::flatbuffers::String *sourceNode() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCENODE);
  }
  ::flatbuffers::String *mutable_sourceNode() {
    return GetPointer<::flatbuffers::String *>(VT_SOURCENODE);
  }
  /// Description of the source of the event.
  const ::flatbuffers::String *sourceName() const {
    return GetPointer<const ::flatbuffers::String *>(VT_SOURCENAME);
  }
  ::flatbuffers::String *mutable_sourceName() {
    return GetPointer<::flatbuffers::String *>(VT_SOURCENAME);
  }
  /// optional, otherwise filled by provider.
  /// Format is FILETIME
  uint64_t timestamp() const {
    return GetField<uint64_t>(VT_TIMESTAMP, 0);
  }
  bool mutate_timestamp(uint64_t _timestamp = 0) {
    return SetField<uint64_t>(VT_TIMESTAMP, _timestamp, 0);
  }
  /// optional, otherwise filled by provider.
  uint64_t sequenceNumber() const {
    return GetField<uint64_t>(VT_SEQUENCENUMBER, 0);
  }
  bool mutate_sequenceNumber(uint64_t _sequenceNumber = 0) {
    return SetField<uint64_t>(VT_SEQUENCENUMBER, _sequenceNumber, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTTYPE) &&
           verifier.VerifyString(eventType()) &&
           VerifyOffset(verifier, VT_SOURCENODE) &&
           verifier.VerifyString(sourceNode()) &&
           VerifyOffset(verifier, VT_SOURCENAME) &&
           verifier.VerifyString(sourceName()) &&
           VerifyField<uint64_t>(verifier, VT_TIMESTAMP, 8) &&
           VerifyField<uint64_t>(verifier, VT_SEQUENCENUMBER, 8) &&
           verifier.EndTable();
  }
  EventInfoT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(EventInfoT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<EventInfo> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const EventInfoT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct EventInfoBuilder {
  typedef EventInfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_eventType(::flatbuffers::Offset<::flatbuffers::String> eventType) {
    fbb_.AddOffset(EventInfo::VT_EVENTTYPE, eventType);
  }
  void add_sourceNode(::flatbuffers::Offset<::flatbuffers::String> sourceNode) {
    fbb_.AddOffset(EventInfo::VT_SOURCENODE, sourceNode);
  }
  void add_sourceName(::flatbuffers::Offset<::flatbuffers::String> sourceName) {
    fbb_.AddOffset(EventInfo::VT_SOURCENAME, sourceName);
  }
  void add_timestamp(uint64_t timestamp) {
    fbb_.AddElement<uint64_t>(EventInfo::VT_TIMESTAMP, timestamp, 0);
  }
  void add_sequenceNumber(uint64_t sequenceNumber) {
    fbb_.AddElement<uint64_t>(EventInfo::VT_SEQUENCENUMBER, sequenceNumber, 0);
  }
  explicit EventInfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<EventInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<EventInfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<EventInfo> CreateEventInfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> eventType = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceNode = 0,
    ::flatbuffers::Offset<::flatbuffers::String> sourceName = 0,
    uint64_t timestamp = 0,
    uint64_t sequenceNumber = 0) {
  EventInfoBuilder builder_(_fbb);
  builder_.add_sequenceNumber(sequenceNumber);
  builder_.add_timestamp(timestamp);
  builder_.add_sourceName(sourceName);
  builder_.add_sourceNode(sourceNode);
  builder_.add_eventType(eventType);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<EventInfo> CreateEventInfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *eventType = nullptr,
    const char *sourceNode = nullptr,
    const char *sourceName = nullptr,
    uint64_t timestamp = 0,
    uint64_t sequenceNumber = 0) {
  auto eventType__ = eventType ? _fbb.CreateString(eventType) : 0;
  auto sourceNode__ = sourceNode ? _fbb.CreateString(sourceNode) : 0;
  auto sourceName__ = sourceName ? _fbb.CreateString(sourceName) : 0;
  return comm::datalayer::CreateEventInfo(
      _fbb,
      eventType__,
      sourceNode__,
      sourceName__,
      timestamp,
      sequenceNumber);
}

::flatbuffers::Offset<EventInfo> CreateEventInfo(::flatbuffers::FlatBufferBuilder &_fbb, const EventInfoT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline EventInfoT *EventInfo::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<EventInfoT>(new EventInfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void EventInfo::UnPackTo(EventInfoT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = eventType(); if (_e) _o->eventType = _e->str(); }
  { auto _e = sourceNode(); if (_e) _o->sourceNode = _e->str(); }
  { auto _e = sourceName(); if (_e) _o->sourceName = _e->str(); }
  { auto _e = timestamp(); _o->timestamp = _e; }
  { auto _e = sequenceNumber(); _o->sequenceNumber = _e; }
}

inline ::flatbuffers::Offset<EventInfo> EventInfo::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const EventInfoT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateEventInfo(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<EventInfo> CreateEventInfo(::flatbuffers::FlatBufferBuilder &_fbb, const EventInfoT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const EventInfoT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _eventType = _o->eventType.empty() ? 0 : _fbb.CreateString(_o->eventType);
  auto _sourceNode = _o->sourceNode.empty() ? 0 : _fbb.CreateString(_o->sourceNode);
  auto _sourceName = _o->sourceName.empty() ? 0 : _fbb.CreateString(_o->sourceName);
  auto _timestamp = _o->timestamp;
  auto _sequenceNumber = _o->sequenceNumber;
  return comm::datalayer::CreateEventInfo(
      _fbb,
      _eventType,
      _sourceNode,
      _sourceName,
      _timestamp,
      _sequenceNumber);
}

inline const comm::datalayer::EventInfo *GetEventInfo(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::EventInfo>(buf);
}

inline const comm::datalayer::EventInfo *GetSizePrefixedEventInfo(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::EventInfo>(buf);
}

inline EventInfo *GetMutableEventInfo(void *buf) {
  return ::flatbuffers::GetMutableRoot<EventInfo>(buf);
}

inline comm::datalayer::EventInfo *GetMutableSizePrefixedEventInfo(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::EventInfo>(buf);
}

inline bool VerifyEventInfoBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::EventInfo>(nullptr);
}

inline bool VerifySizePrefixedEventInfoBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::EventInfo>(nullptr);
}

inline void FinishEventInfoBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::EventInfo> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedEventInfoBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::EventInfo> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::EventInfoT> UnPackEventInfo(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::EventInfoT>(GetEventInfo(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::EventInfoT> UnPackSizePrefixedEventInfo(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::EventInfoT>(GetSizePrefixedEventInfo(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_EVENTINFO_COMM_DATALAYER_H_
