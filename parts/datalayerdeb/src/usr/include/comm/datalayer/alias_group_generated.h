// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ALIASGROUP_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_ALIASGROUP_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct Alias;
struct AliasBuilder;
struct AliasT;

struct AliasGroup;
struct AliasGroupBuilder;
struct AliasGroupT;

struct AliasT : public ::flatbuffers::NativeTable {
  typedef Alias TableType;
  std::string address{};
  std::string target{};
};

/// An Alias gives the possibility to expose a data layer node under another well-defined data layer address.
/// The concept of Aliases is similar to symbolic links in a file-system.
/// The alias inherits all properties of the target, that it points to.
/// There can be multiple aliases for the same data layer node.
/// It is possible to have an aliases which points to another alias to configurable number of recursions.
/// This configuration takes place in data layer node datalayer/server/settings field maxAliasDepth.
struct Alias FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AliasT NativeTableType;
  typedef AliasBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ADDRESS = 4,
    VT_TARGET = 6
  };
  /// The address of the alias in the data layer.
  const ::flatbuffers::String *address() const {
    return GetPointer<const ::flatbuffers::String *>(VT_ADDRESS);
  }
  ::flatbuffers::String *mutable_address() {
    return GetPointer<::flatbuffers::String *>(VT_ADDRESS);
  }
  bool KeyCompareLessThan(const Alias * const o) const {
    return *address() < *o->address();
  }
  int KeyCompareWithValue(const char *_address) const {
    return strcmp(address()->c_str(), _address);
  }
  /// Location where address points to in data layer.
  const ::flatbuffers::String *target() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TARGET);
  }
  ::flatbuffers::String *mutable_target() {
    return GetPointer<::flatbuffers::String *>(VT_TARGET);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_ADDRESS) &&
           verifier.VerifyString(address()) &&
           VerifyOffset(verifier, VT_TARGET) &&
           verifier.VerifyString(target()) &&
           verifier.EndTable();
  }
  AliasT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AliasT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Alias> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AliasT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AliasBuilder {
  typedef Alias Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_address(::flatbuffers::Offset<::flatbuffers::String> address) {
    fbb_.AddOffset(Alias::VT_ADDRESS, address);
  }
  void add_target(::flatbuffers::Offset<::flatbuffers::String> target) {
    fbb_.AddOffset(Alias::VT_TARGET, target);
  }
  explicit AliasBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Alias> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Alias>(end);
    fbb_.Required(o, Alias::VT_ADDRESS);
    return o;
  }
};

inline ::flatbuffers::Offset<Alias> CreateAlias(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> address = 0,
    ::flatbuffers::Offset<::flatbuffers::String> target = 0) {
  AliasBuilder builder_(_fbb);
  builder_.add_target(target);
  builder_.add_address(address);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Alias> CreateAliasDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *address = nullptr,
    const char *target = nullptr) {
  auto address__ = address ? _fbb.CreateString(address) : 0;
  auto target__ = target ? _fbb.CreateString(target) : 0;
  return comm::datalayer::CreateAlias(
      _fbb,
      address__,
      target__);
}

::flatbuffers::Offset<Alias> CreateAlias(::flatbuffers::FlatBufferBuilder &_fbb, const AliasT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AliasGroupT : public ::flatbuffers::NativeTable {
  typedef AliasGroup TableType;
  std::string name{};
  std::vector<std::unique_ptr<comm::datalayer::AliasT>> aliases{};
  AliasGroupT() = default;
  AliasGroupT(const AliasGroupT &o);
  AliasGroupT(AliasGroupT&&) FLATBUFFERS_NOEXCEPT = default;
  AliasGroupT &operator=(AliasGroupT o) FLATBUFFERS_NOEXCEPT;
};

/// Related aliases can be grouped together.
/// Multiple alias groups can be handled in the data layer.
/// This we it is possible manage many aliases which originate from different clients.
/// The table AliasGroup encapsulates an array of Aliases.
struct AliasGroup FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef AliasGroupT NativeTableType;
  typedef AliasGroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_ALIASES = 6
  };
  /// A name for the group of aliases.
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const AliasGroup * const o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  /// An array of aliases which belong to this group.
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Alias>> *aliases() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Alias>> *>(VT_ALIASES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Alias>> *mutable_aliases() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Alias>> *>(VT_ALIASES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_ALIASES) &&
           verifier.VerifyVector(aliases()) &&
           verifier.VerifyVectorOfTables(aliases()) &&
           verifier.EndTable();
  }
  AliasGroupT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AliasGroupT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<AliasGroup> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AliasGroupT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AliasGroupBuilder {
  typedef AliasGroup Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(AliasGroup::VT_NAME, name);
  }
  void add_aliases(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Alias>>> aliases) {
    fbb_.AddOffset(AliasGroup::VT_ALIASES, aliases);
  }
  explicit AliasGroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<AliasGroup> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<AliasGroup>(end);
    fbb_.Required(o, AliasGroup::VT_NAME);
    return o;
  }
};

inline ::flatbuffers::Offset<AliasGroup> CreateAliasGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Alias>>> aliases = 0) {
  AliasGroupBuilder builder_(_fbb);
  builder_.add_aliases(aliases);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<AliasGroup> CreateAliasGroupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    std::vector<::flatbuffers::Offset<comm::datalayer::Alias>> *aliases = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto aliases__ = aliases ? _fbb.CreateVectorOfSortedTables<comm::datalayer::Alias>(aliases) : 0;
  return comm::datalayer::CreateAliasGroup(
      _fbb,
      name__,
      aliases__);
}

::flatbuffers::Offset<AliasGroup> CreateAliasGroup(::flatbuffers::FlatBufferBuilder &_fbb, const AliasGroupT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline AliasT *Alias::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AliasT>(new AliasT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Alias::UnPackTo(AliasT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = address(); if (_e) _o->address = _e->str(); }
  { auto _e = target(); if (_e) _o->target = _e->str(); }
}

inline ::flatbuffers::Offset<Alias> Alias::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AliasT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAlias(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Alias> CreateAlias(::flatbuffers::FlatBufferBuilder &_fbb, const AliasT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AliasT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _address = _fbb.CreateString(_o->address);
  auto _target = _o->target.empty() ? 0 : _fbb.CreateString(_o->target);
  return comm::datalayer::CreateAlias(
      _fbb,
      _address,
      _target);
}

inline AliasGroupT::AliasGroupT(const AliasGroupT &o)
      : name(o.name) {
  aliases.reserve(o.aliases.size());
  for (const auto &aliases_ : o.aliases) { aliases.emplace_back((aliases_) ? new comm::datalayer::AliasT(*aliases_) : nullptr); }
}

inline AliasGroupT &AliasGroupT::operator=(AliasGroupT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(aliases, o.aliases);
  return *this;
}

inline AliasGroupT *AliasGroup::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<AliasGroupT>(new AliasGroupT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void AliasGroup::UnPackTo(AliasGroupT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = aliases(); if (_e) { _o->aliases.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->aliases[_i]) { _e->Get(_i)->UnPackTo(_o->aliases[_i].get(), _resolver); } else { _o->aliases[_i] = std::unique_ptr<comm::datalayer::AliasT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->aliases.resize(0); } }
}

inline ::flatbuffers::Offset<AliasGroup> AliasGroup::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const AliasGroupT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAliasGroup(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<AliasGroup> CreateAliasGroup(::flatbuffers::FlatBufferBuilder &_fbb, const AliasGroupT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const AliasGroupT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _fbb.CreateString(_o->name);
  auto _aliases = _o->aliases.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::Alias>> (_o->aliases.size(), [](size_t i, _VectorArgs *__va) { return CreateAlias(*__va->__fbb, __va->__o->aliases[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::CreateAliasGroup(
      _fbb,
      _name,
      _aliases);
}

inline const comm::datalayer::AliasGroup *GetAliasGroup(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::AliasGroup>(buf);
}

inline const comm::datalayer::AliasGroup *GetSizePrefixedAliasGroup(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::AliasGroup>(buf);
}

inline AliasGroup *GetMutableAliasGroup(void *buf) {
  return ::flatbuffers::GetMutableRoot<AliasGroup>(buf);
}

inline comm::datalayer::AliasGroup *GetMutableSizePrefixedAliasGroup(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::AliasGroup>(buf);
}

inline bool VerifyAliasGroupBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::AliasGroup>(nullptr);
}

inline bool VerifySizePrefixedAliasGroupBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::AliasGroup>(nullptr);
}

inline void FinishAliasGroupBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::AliasGroup> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedAliasGroupBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::AliasGroup> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::AliasGroupT> UnPackAliasGroup(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::AliasGroupT>(GetAliasGroup(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::AliasGroupT> UnPackSizePrefixedAliasGroup(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::AliasGroupT>(GetSizePrefixedAliasGroup(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_ALIASGROUP_COMM_DATALAYER_H_
