// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_RTDATA_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_RTDATA_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct RtDataArea;
struct RtDataAreaBuilder;
struct RtDataAreaT;

struct RtData;
struct RtDataBuilder;
struct RtDataT;

struct RtDataAreaT : public ::flatbuffers::NativeTable {
  typedef RtDataArea TableType;
  uint32_t bitoffset = 0;
  uint32_t bitsize = 0;
  std::vector<uint8_t> data{};
};

struct RtDataArea FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RtDataAreaT NativeTableType;
  typedef RtDataAreaBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BITOFFSET = 4,
    VT_BITSIZE = 6,
    VT_DATA = 8
  };
  /// Offset (in bits) of variable in memory
  uint32_t bitoffset() const {
    return GetField<uint32_t>(VT_BITOFFSET, 0);
  }
  bool mutate_bitoffset(uint32_t _bitoffset = 0) {
    return SetField<uint32_t>(VT_BITOFFSET, _bitoffset, 0);
  }
  /// Size (in bits) of variable in memory
  uint32_t bitsize() const {
    return GetField<uint32_t>(VT_BITSIZE, 0);
  }
  bool mutate_bitsize(uint32_t _bitsize = 0) {
    return SetField<uint32_t>(VT_BITSIZE, _bitsize, 0);
  }
  /// Data of the area
  const ::flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const ::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  ::flatbuffers::Vector<uint8_t> *mutable_data() {
    return GetPointer<::flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_BITOFFSET, 4) &&
           VerifyField<uint32_t>(verifier, VT_BITSIZE, 4) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
  RtDataAreaT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RtDataAreaT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<RtDataArea> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RtDataAreaT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RtDataAreaBuilder {
  typedef RtDataArea Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_bitoffset(uint32_t bitoffset) {
    fbb_.AddElement<uint32_t>(RtDataArea::VT_BITOFFSET, bitoffset, 0);
  }
  void add_bitsize(uint32_t bitsize) {
    fbb_.AddElement<uint32_t>(RtDataArea::VT_BITSIZE, bitsize, 0);
  }
  void add_data(::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(RtDataArea::VT_DATA, data);
  }
  explicit RtDataAreaBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RtDataArea> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RtDataArea>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RtDataArea> CreateRtDataArea(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t bitoffset = 0,
    uint32_t bitsize = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<uint8_t>> data = 0) {
  RtDataAreaBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_bitsize(bitsize);
  builder_.add_bitoffset(bitoffset);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RtDataArea> CreateRtDataAreaDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t bitoffset = 0,
    uint32_t bitsize = 0,
    const std::vector<uint8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<uint8_t>(*data) : 0;
  return comm::datalayer::CreateRtDataArea(
      _fbb,
      bitoffset,
      bitsize,
      data__);
}

::flatbuffers::Offset<RtDataArea> CreateRtDataArea(::flatbuffers::FlatBufferBuilder &_fbb, const RtDataAreaT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct RtDataT : public ::flatbuffers::NativeTable {
  typedef RtData TableType;
  uint32_t revisionNumber = 0;
  std::vector<std::unique_ptr<comm::datalayer::RtDataAreaT>> areas{};
  RtDataT() = default;
  RtDataT(const RtDataT &o);
  RtDataT(RtDataT&&) FLATBUFFERS_NOEXCEPT = default;
  RtDataT &operator=(RtDataT o) FLATBUFFERS_NOEXCEPT;
};

struct RtData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef RtDataT NativeTableType;
  typedef RtDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REVISIONNUMBER = 4,
    VT_AREAS = 6
  };
  /// current revision number of RT memory
  uint32_t revisionNumber() const {
    return GetField<uint32_t>(VT_REVISIONNUMBER, 0);
  }
  bool mutate_revisionNumber(uint32_t _revisionNumber = 0) {
    return SetField<uint32_t>(VT_REVISIONNUMBER, _revisionNumber, 0);
  }
  /// areas to read/write
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::RtDataArea>> *areas() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::RtDataArea>> *>(VT_AREAS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::RtDataArea>> *mutable_areas() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::RtDataArea>> *>(VT_AREAS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_REVISIONNUMBER, 4) &&
           VerifyOffset(verifier, VT_AREAS) &&
           verifier.VerifyVector(areas()) &&
           verifier.VerifyVectorOfTables(areas()) &&
           verifier.EndTable();
  }
  RtDataT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(RtDataT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<RtData> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RtDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct RtDataBuilder {
  typedef RtData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_revisionNumber(uint32_t revisionNumber) {
    fbb_.AddElement<uint32_t>(RtData::VT_REVISIONNUMBER, revisionNumber, 0);
  }
  void add_areas(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::RtDataArea>>> areas) {
    fbb_.AddOffset(RtData::VT_AREAS, areas);
  }
  explicit RtDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<RtData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<RtData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<RtData> CreateRtData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t revisionNumber = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::RtDataArea>>> areas = 0) {
  RtDataBuilder builder_(_fbb);
  builder_.add_areas(areas);
  builder_.add_revisionNumber(revisionNumber);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<RtData> CreateRtDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t revisionNumber = 0,
    const std::vector<::flatbuffers::Offset<comm::datalayer::RtDataArea>> *areas = nullptr) {
  auto areas__ = areas ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::RtDataArea>>(*areas) : 0;
  return comm::datalayer::CreateRtData(
      _fbb,
      revisionNumber,
      areas__);
}

::flatbuffers::Offset<RtData> CreateRtData(::flatbuffers::FlatBufferBuilder &_fbb, const RtDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline RtDataAreaT *RtDataArea::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RtDataAreaT>(new RtDataAreaT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void RtDataArea::UnPackTo(RtDataAreaT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = bitoffset(); _o->bitoffset = _e; }
  { auto _e = bitsize(); _o->bitsize = _e; }
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); std::copy(_e->begin(), _e->end(), _o->data.begin()); } }
}

inline ::flatbuffers::Offset<RtDataArea> RtDataArea::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RtDataAreaT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRtDataArea(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<RtDataArea> CreateRtDataArea(::flatbuffers::FlatBufferBuilder &_fbb, const RtDataAreaT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RtDataAreaT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _bitoffset = _o->bitoffset;
  auto _bitsize = _o->bitsize;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  return comm::datalayer::CreateRtDataArea(
      _fbb,
      _bitoffset,
      _bitsize,
      _data);
}

inline RtDataT::RtDataT(const RtDataT &o)
      : revisionNumber(o.revisionNumber) {
  areas.reserve(o.areas.size());
  for (const auto &areas_ : o.areas) { areas.emplace_back((areas_) ? new comm::datalayer::RtDataAreaT(*areas_) : nullptr); }
}

inline RtDataT &RtDataT::operator=(RtDataT o) FLATBUFFERS_NOEXCEPT {
  std::swap(revisionNumber, o.revisionNumber);
  std::swap(areas, o.areas);
  return *this;
}

inline RtDataT *RtData::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<RtDataT>(new RtDataT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void RtData::UnPackTo(RtDataT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = revisionNumber(); _o->revisionNumber = _e; }
  { auto _e = areas(); if (_e) { _o->areas.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->areas[_i]) { _e->Get(_i)->UnPackTo(_o->areas[_i].get(), _resolver); } else { _o->areas[_i] = std::unique_ptr<comm::datalayer::RtDataAreaT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->areas.resize(0); } }
}

inline ::flatbuffers::Offset<RtData> RtData::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const RtDataT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateRtData(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<RtData> CreateRtData(::flatbuffers::FlatBufferBuilder &_fbb, const RtDataT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const RtDataT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _revisionNumber = _o->revisionNumber;
  auto _areas = _o->areas.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::RtDataArea>> (_o->areas.size(), [](size_t i, _VectorArgs *__va) { return CreateRtDataArea(*__va->__fbb, __va->__o->areas[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::CreateRtData(
      _fbb,
      _revisionNumber,
      _areas);
}

inline const comm::datalayer::RtData *GetRtData(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::RtData>(buf);
}

inline const comm::datalayer::RtData *GetSizePrefixedRtData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::RtData>(buf);
}

inline RtData *GetMutableRtData(void *buf) {
  return ::flatbuffers::GetMutableRoot<RtData>(buf);
}

inline comm::datalayer::RtData *GetMutableSizePrefixedRtData(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::RtData>(buf);
}

inline bool VerifyRtDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::RtData>(nullptr);
}

inline bool VerifySizePrefixedRtDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::RtData>(nullptr);
}

inline void FinishRtDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::RtData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRtDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::RtData> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::RtDataT> UnPackRtData(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::RtDataT>(GetRtData(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::RtDataT> UnPackSizePrefixedRtData(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::RtDataT>(GetSizePrefixedRtData(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_RTDATA_COMM_DATALAYER_H_
