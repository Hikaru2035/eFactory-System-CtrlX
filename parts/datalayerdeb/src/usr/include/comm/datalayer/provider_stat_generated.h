// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROVIDERSTAT_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_PROVIDERSTAT_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

#include "capabilities_generated.h"
#include "scope_generated.h"

namespace comm {
namespace datalayer {

struct ProviderStat;
struct ProviderStatBuilder;
struct ProviderStatT;

struct ProviderStatT : public ::flatbuffers::NativeTable {
  typedef ProviderStat TableType;
  std::string identity{};
  std::vector<std::string> nodes{};
  std::vector<std::string> rejectedNodes{};
  std::vector<std::unique_ptr<comm::datalayer::ScopeT>> scopes{};
  std::unique_ptr<comm::datalayer::CapabilitiesT> capabilities{};
  std::vector<std::unique_ptr<comm::datalayer::ScopeT>> rejectedScopes{};
  ProviderStatT() = default;
  ProviderStatT(const ProviderStatT &o);
  ProviderStatT(ProviderStatT&&) FLATBUFFERS_NOEXCEPT = default;
  ProviderStatT &operator=(ProviderStatT o) FLATBUFFERS_NOEXCEPT;
};

/// statistics of a provider
struct ProviderStat FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ProviderStatT NativeTableType;
  typedef ProviderStatBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDENTITY = 4,
    VT_NODES = 6,
    VT_REJECTEDNODES = 8,
    VT_SCOPES = 10,
    VT_CAPABILITIES = 12,
    VT_REJECTEDSCOPES = 14
  };
  const ::flatbuffers::String *identity() const {
    return GetPointer<const ::flatbuffers::String *>(VT_IDENTITY);
  }
  ::flatbuffers::String *mutable_identity() {
    return GetPointer<::flatbuffers::String *>(VT_IDENTITY);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *nodes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NODES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mutable_nodes() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_NODES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *rejectedNodes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REJECTEDNODES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *mutable_rejectedNodes() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_REJECTEDNODES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>> *scopes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>> *>(VT_SCOPES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>> *mutable_scopes() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>> *>(VT_SCOPES);
  }
  const comm::datalayer::Capabilities *capabilities() const {
    return GetPointer<const comm::datalayer::Capabilities *>(VT_CAPABILITIES);
  }
  comm::datalayer::Capabilities *mutable_capabilities() {
    return GetPointer<comm::datalayer::Capabilities *>(VT_CAPABILITIES);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>> *rejectedScopes() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>> *>(VT_REJECTEDSCOPES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>> *mutable_rejectedScopes() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>> *>(VT_REJECTEDSCOPES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IDENTITY) &&
           verifier.VerifyString(identity()) &&
           VerifyOffset(verifier, VT_NODES) &&
           verifier.VerifyVector(nodes()) &&
           verifier.VerifyVectorOfStrings(nodes()) &&
           VerifyOffset(verifier, VT_REJECTEDNODES) &&
           verifier.VerifyVector(rejectedNodes()) &&
           verifier.VerifyVectorOfStrings(rejectedNodes()) &&
           VerifyOffset(verifier, VT_SCOPES) &&
           verifier.VerifyVector(scopes()) &&
           verifier.VerifyVectorOfTables(scopes()) &&
           VerifyOffset(verifier, VT_CAPABILITIES) &&
           verifier.VerifyTable(capabilities()) &&
           VerifyOffset(verifier, VT_REJECTEDSCOPES) &&
           verifier.VerifyVector(rejectedScopes()) &&
           verifier.VerifyVectorOfTables(rejectedScopes()) &&
           verifier.EndTable();
  }
  ProviderStatT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ProviderStatT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<ProviderStat> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ProviderStatBuilder {
  typedef ProviderStat Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_identity(::flatbuffers::Offset<::flatbuffers::String> identity) {
    fbb_.AddOffset(ProviderStat::VT_IDENTITY, identity);
  }
  void add_nodes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> nodes) {
    fbb_.AddOffset(ProviderStat::VT_NODES, nodes);
  }
  void add_rejectedNodes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rejectedNodes) {
    fbb_.AddOffset(ProviderStat::VT_REJECTEDNODES, rejectedNodes);
  }
  void add_scopes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>>> scopes) {
    fbb_.AddOffset(ProviderStat::VT_SCOPES, scopes);
  }
  void add_capabilities(::flatbuffers::Offset<comm::datalayer::Capabilities> capabilities) {
    fbb_.AddOffset(ProviderStat::VT_CAPABILITIES, capabilities);
  }
  void add_rejectedScopes(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>>> rejectedScopes) {
    fbb_.AddOffset(ProviderStat::VT_REJECTEDSCOPES, rejectedScopes);
  }
  explicit ProviderStatBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<ProviderStat> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<ProviderStat>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<ProviderStat> CreateProviderStat(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> identity = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> nodes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> rejectedNodes = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>>> scopes = 0,
    ::flatbuffers::Offset<comm::datalayer::Capabilities> capabilities = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::Scope>>> rejectedScopes = 0) {
  ProviderStatBuilder builder_(_fbb);
  builder_.add_rejectedScopes(rejectedScopes);
  builder_.add_capabilities(capabilities);
  builder_.add_scopes(scopes);
  builder_.add_rejectedNodes(rejectedNodes);
  builder_.add_nodes(nodes);
  builder_.add_identity(identity);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<ProviderStat> CreateProviderStatDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *identity = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *nodes = nullptr,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *rejectedNodes = nullptr,
    std::vector<::flatbuffers::Offset<comm::datalayer::Scope>> *scopes = nullptr,
    ::flatbuffers::Offset<comm::datalayer::Capabilities> capabilities = 0,
    std::vector<::flatbuffers::Offset<comm::datalayer::Scope>> *rejectedScopes = nullptr) {
  auto identity__ = identity ? _fbb.CreateString(identity) : 0;
  auto nodes__ = nodes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*nodes) : 0;
  auto rejectedNodes__ = rejectedNodes ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*rejectedNodes) : 0;
  auto scopes__ = scopes ? _fbb.CreateVectorOfSortedTables<comm::datalayer::Scope>(scopes) : 0;
  auto rejectedScopes__ = rejectedScopes ? _fbb.CreateVectorOfSortedTables<comm::datalayer::Scope>(rejectedScopes) : 0;
  return comm::datalayer::CreateProviderStat(
      _fbb,
      identity__,
      nodes__,
      rejectedNodes__,
      scopes__,
      capabilities,
      rejectedScopes__);
}

::flatbuffers::Offset<ProviderStat> CreateProviderStat(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ProviderStatT::ProviderStatT(const ProviderStatT &o)
      : identity(o.identity),
        nodes(o.nodes),
        rejectedNodes(o.rejectedNodes),
        capabilities((o.capabilities) ? new comm::datalayer::CapabilitiesT(*o.capabilities) : nullptr) {
  scopes.reserve(o.scopes.size());
  for (const auto &scopes_ : o.scopes) { scopes.emplace_back((scopes_) ? new comm::datalayer::ScopeT(*scopes_) : nullptr); }
  rejectedScopes.reserve(o.rejectedScopes.size());
  for (const auto &rejectedScopes_ : o.rejectedScopes) { rejectedScopes.emplace_back((rejectedScopes_) ? new comm::datalayer::ScopeT(*rejectedScopes_) : nullptr); }
}

inline ProviderStatT &ProviderStatT::operator=(ProviderStatT o) FLATBUFFERS_NOEXCEPT {
  std::swap(identity, o.identity);
  std::swap(nodes, o.nodes);
  std::swap(rejectedNodes, o.rejectedNodes);
  std::swap(scopes, o.scopes);
  std::swap(capabilities, o.capabilities);
  std::swap(rejectedScopes, o.rejectedScopes);
  return *this;
}

inline ProviderStatT *ProviderStat::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<ProviderStatT>(new ProviderStatT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void ProviderStat::UnPackTo(ProviderStatT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = identity(); if (_e) _o->identity = _e->str(); }
  { auto _e = nodes(); if (_e) { _o->nodes.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->nodes[_i] = _e->Get(_i)->str(); } } else { _o->nodes.resize(0); } }
  { auto _e = rejectedNodes(); if (_e) { _o->rejectedNodes.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->rejectedNodes[_i] = _e->Get(_i)->str(); } } else { _o->rejectedNodes.resize(0); } }
  { auto _e = scopes(); if (_e) { _o->scopes.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->scopes[_i]) { _e->Get(_i)->UnPackTo(_o->scopes[_i].get(), _resolver); } else { _o->scopes[_i] = std::unique_ptr<comm::datalayer::ScopeT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->scopes.resize(0); } }
  { auto _e = capabilities(); if (_e) { if(_o->capabilities) { _e->UnPackTo(_o->capabilities.get(), _resolver); } else { _o->capabilities = std::unique_ptr<comm::datalayer::CapabilitiesT>(_e->UnPack(_resolver)); } } else if (_o->capabilities) { _o->capabilities.reset(); } }
  { auto _e = rejectedScopes(); if (_e) { _o->rejectedScopes.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->rejectedScopes[_i]) { _e->Get(_i)->UnPackTo(_o->rejectedScopes[_i].get(), _resolver); } else { _o->rejectedScopes[_i] = std::unique_ptr<comm::datalayer::ScopeT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->rejectedScopes.resize(0); } }
}

inline ::flatbuffers::Offset<ProviderStat> ProviderStat::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateProviderStat(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<ProviderStat> CreateProviderStat(::flatbuffers::FlatBufferBuilder &_fbb, const ProviderStatT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const ProviderStatT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _identity = _o->identity.empty() ? 0 : _fbb.CreateString(_o->identity);
  auto _nodes = _o->nodes.size() ? _fbb.CreateVectorOfStrings(_o->nodes) : 0;
  auto _rejectedNodes = _o->rejectedNodes.size() ? _fbb.CreateVectorOfStrings(_o->rejectedNodes) : 0;
  auto _scopes = _o->scopes.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::Scope>> (_o->scopes.size(), [](size_t i, _VectorArgs *__va) { return CreateScope(*__va->__fbb, __va->__o->scopes[i].get(), __va->__rehasher); }, &_va ) : 0;
  auto _capabilities = _o->capabilities ? CreateCapabilities(_fbb, _o->capabilities.get(), _rehasher) : 0;
  auto _rejectedScopes = _o->rejectedScopes.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::Scope>> (_o->rejectedScopes.size(), [](size_t i, _VectorArgs *__va) { return CreateScope(*__va->__fbb, __va->__o->rejectedScopes[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::CreateProviderStat(
      _fbb,
      _identity,
      _nodes,
      _rejectedNodes,
      _scopes,
      _capabilities,
      _rejectedScopes);
}

inline const comm::datalayer::ProviderStat *GetProviderStat(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::ProviderStat>(buf);
}

inline const comm::datalayer::ProviderStat *GetSizePrefixedProviderStat(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::ProviderStat>(buf);
}

inline ProviderStat *GetMutableProviderStat(void *buf) {
  return ::flatbuffers::GetMutableRoot<ProviderStat>(buf);
}

inline comm::datalayer::ProviderStat *GetMutableSizePrefixedProviderStat(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::ProviderStat>(buf);
}

inline bool VerifyProviderStatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::ProviderStat>(nullptr);
}

inline bool VerifySizePrefixedProviderStatBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::ProviderStat>(nullptr);
}

inline void FinishProviderStatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::ProviderStat> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedProviderStatBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::ProviderStat> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::ProviderStatT> UnPackProviderStat(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ProviderStatT>(GetProviderStat(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::ProviderStatT> UnPackSizePrefixedProviderStat(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::ProviderStatT>(GetSizePrefixedProviderStat(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_PROVIDERSTAT_COMM_DATALAYER_H_
