// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MEMORYMAPSCUSTOM_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_MEMORYMAPSCUSTOM_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

#include "memory_map_custom_generated.h"

namespace comm {
namespace datalayer {

struct MemoryMapsCustom;
struct MemoryMapsCustomBuilder;
struct MemoryMapsCustomT;

struct MemoryMapsCustomT : public ::flatbuffers::NativeTable {
  typedef MemoryMapsCustom TableType;
  std::vector<std::unique_ptr<comm::datalayer::MemoryMapCustomT>> customMaps{};
  MemoryMapsCustomT() = default;
  MemoryMapsCustomT(const MemoryMapsCustomT &o);
  MemoryMapsCustomT(MemoryMapsCustomT&&) FLATBUFFERS_NOEXCEPT = default;
  MemoryMapsCustomT &operator=(MemoryMapsCustomT o) FLATBUFFERS_NOEXCEPT;
};

struct MemoryMapsCustom FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MemoryMapsCustomT NativeTableType;
  typedef MemoryMapsCustomBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CUSTOMMAPS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::MemoryMapCustom>> *customMaps() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::MemoryMapCustom>> *>(VT_CUSTOMMAPS);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::MemoryMapCustom>> *mutable_customMaps() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::MemoryMapCustom>> *>(VT_CUSTOMMAPS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CUSTOMMAPS) &&
           verifier.VerifyVector(customMaps()) &&
           verifier.VerifyVectorOfTables(customMaps()) &&
           verifier.EndTable();
  }
  MemoryMapsCustomT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MemoryMapsCustomT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<MemoryMapsCustom> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapsCustomT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MemoryMapsCustomBuilder {
  typedef MemoryMapsCustom Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_customMaps(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::MemoryMapCustom>>> customMaps) {
    fbb_.AddOffset(MemoryMapsCustom::VT_CUSTOMMAPS, customMaps);
  }
  explicit MemoryMapsCustomBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MemoryMapsCustom> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MemoryMapsCustom>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MemoryMapsCustom> CreateMemoryMapsCustom(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::MemoryMapCustom>>> customMaps = 0) {
  MemoryMapsCustomBuilder builder_(_fbb);
  builder_.add_customMaps(customMaps);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MemoryMapsCustom> CreateMemoryMapsCustomDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<comm::datalayer::MemoryMapCustom>> *customMaps = nullptr) {
  auto customMaps__ = customMaps ? _fbb.CreateVectorOfSortedTables<comm::datalayer::MemoryMapCustom>(customMaps) : 0;
  return comm::datalayer::CreateMemoryMapsCustom(
      _fbb,
      customMaps__);
}

::flatbuffers::Offset<MemoryMapsCustom> CreateMemoryMapsCustom(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapsCustomT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MemoryMapsCustomT::MemoryMapsCustomT(const MemoryMapsCustomT &o) {
  customMaps.reserve(o.customMaps.size());
  for (const auto &customMaps_ : o.customMaps) { customMaps.emplace_back((customMaps_) ? new comm::datalayer::MemoryMapCustomT(*customMaps_) : nullptr); }
}

inline MemoryMapsCustomT &MemoryMapsCustomT::operator=(MemoryMapsCustomT o) FLATBUFFERS_NOEXCEPT {
  std::swap(customMaps, o.customMaps);
  return *this;
}

inline MemoryMapsCustomT *MemoryMapsCustom::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MemoryMapsCustomT>(new MemoryMapsCustomT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MemoryMapsCustom::UnPackTo(MemoryMapsCustomT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = customMaps(); if (_e) { _o->customMaps.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->customMaps[_i]) { _e->Get(_i)->UnPackTo(_o->customMaps[_i].get(), _resolver); } else { _o->customMaps[_i] = std::unique_ptr<comm::datalayer::MemoryMapCustomT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->customMaps.resize(0); } }
}

inline ::flatbuffers::Offset<MemoryMapsCustom> MemoryMapsCustom::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapsCustomT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMemoryMapsCustom(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<MemoryMapsCustom> CreateMemoryMapsCustom(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapsCustomT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const MemoryMapsCustomT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _customMaps = _o->customMaps.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::MemoryMapCustom>> (_o->customMaps.size(), [](size_t i, _VectorArgs *__va) { return CreateMemoryMapCustom(*__va->__fbb, __va->__o->customMaps[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::CreateMemoryMapsCustom(
      _fbb,
      _customMaps);
}

inline const comm::datalayer::MemoryMapsCustom *GetMemoryMapsCustom(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::MemoryMapsCustom>(buf);
}

inline const comm::datalayer::MemoryMapsCustom *GetSizePrefixedMemoryMapsCustom(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::MemoryMapsCustom>(buf);
}

inline MemoryMapsCustom *GetMutableMemoryMapsCustom(void *buf) {
  return ::flatbuffers::GetMutableRoot<MemoryMapsCustom>(buf);
}

inline comm::datalayer::MemoryMapsCustom *GetMutableSizePrefixedMemoryMapsCustom(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::MemoryMapsCustom>(buf);
}

inline bool VerifyMemoryMapsCustomBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::MemoryMapsCustom>(nullptr);
}

inline bool VerifySizePrefixedMemoryMapsCustomBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::MemoryMapsCustom>(nullptr);
}

inline void FinishMemoryMapsCustomBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::MemoryMapsCustom> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMemoryMapsCustomBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::MemoryMapsCustom> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::MemoryMapsCustomT> UnPackMemoryMapsCustom(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::MemoryMapsCustomT>(GetMemoryMapsCustom(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::MemoryMapsCustomT> UnPackSizePrefixedMemoryMapsCustom(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::MemoryMapsCustomT>(GetSizePrefixedMemoryMapsCustom(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_MEMORYMAPSCUSTOM_COMM_DATALAYER_H_
