// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CAPABILITIES_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_CAPABILITIES_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

namespace comm {
namespace datalayer {

struct Capabilities;
struct CapabilitiesBuilder;
struct CapabilitiesT;

struct CapabilitiesT : public ::flatbuffers::NativeTable {
  typedef Capabilities TableType;
  uint32_t bulkMax = 0;
  bool multiRegister = false;
  uint32_t maximumMessageSize = 0;
};

struct Capabilities FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef CapabilitiesT NativeTableType;
  typedef CapabilitiesBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_BULKMAX = 4,
    VT_MULTIREGISTER = 6,
    VT_MAXIMUMMESSAGESIZE = 8
  };
  uint32_t bulkMax() const {
    return GetField<uint32_t>(VT_BULKMAX, 0);
  }
  bool mutate_bulkMax(uint32_t _bulkMax = 0) {
    return SetField<uint32_t>(VT_BULKMAX, _bulkMax, 0);
  }
  bool multiRegister() const {
    return GetField<uint8_t>(VT_MULTIREGISTER, 0) != 0;
  }
  bool mutate_multiRegister(bool _multiRegister = 0) {
    return SetField<uint8_t>(VT_MULTIREGISTER, static_cast<uint8_t>(_multiRegister), 0);
  }
  uint32_t maximumMessageSize() const {
    return GetField<uint32_t>(VT_MAXIMUMMESSAGESIZE, 0);
  }
  bool mutate_maximumMessageSize(uint32_t _maximumMessageSize = 0) {
    return SetField<uint32_t>(VT_MAXIMUMMESSAGESIZE, _maximumMessageSize, 0);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_BULKMAX, 4) &&
           VerifyField<uint8_t>(verifier, VT_MULTIREGISTER, 1) &&
           VerifyField<uint32_t>(verifier, VT_MAXIMUMMESSAGESIZE, 4) &&
           verifier.EndTable();
  }
  CapabilitiesT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CapabilitiesT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Capabilities> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CapabilitiesT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CapabilitiesBuilder {
  typedef Capabilities Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_bulkMax(uint32_t bulkMax) {
    fbb_.AddElement<uint32_t>(Capabilities::VT_BULKMAX, bulkMax, 0);
  }
  void add_multiRegister(bool multiRegister) {
    fbb_.AddElement<uint8_t>(Capabilities::VT_MULTIREGISTER, static_cast<uint8_t>(multiRegister), 0);
  }
  void add_maximumMessageSize(uint32_t maximumMessageSize) {
    fbb_.AddElement<uint32_t>(Capabilities::VT_MAXIMUMMESSAGESIZE, maximumMessageSize, 0);
  }
  explicit CapabilitiesBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Capabilities> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Capabilities>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Capabilities> CreateCapabilities(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t bulkMax = 0,
    bool multiRegister = false,
    uint32_t maximumMessageSize = 0) {
  CapabilitiesBuilder builder_(_fbb);
  builder_.add_maximumMessageSize(maximumMessageSize);
  builder_.add_bulkMax(bulkMax);
  builder_.add_multiRegister(multiRegister);
  return builder_.Finish();
}

::flatbuffers::Offset<Capabilities> CreateCapabilities(::flatbuffers::FlatBufferBuilder &_fbb, const CapabilitiesT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline CapabilitiesT *Capabilities::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<CapabilitiesT>(new CapabilitiesT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Capabilities::UnPackTo(CapabilitiesT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = bulkMax(); _o->bulkMax = _e; }
  { auto _e = multiRegister(); _o->multiRegister = _e; }
  { auto _e = maximumMessageSize(); _o->maximumMessageSize = _e; }
}

inline ::flatbuffers::Offset<Capabilities> Capabilities::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const CapabilitiesT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCapabilities(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Capabilities> CreateCapabilities(::flatbuffers::FlatBufferBuilder &_fbb, const CapabilitiesT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const CapabilitiesT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _bulkMax = _o->bulkMax;
  auto _multiRegister = _o->multiRegister;
  auto _maximumMessageSize = _o->maximumMessageSize;
  return comm::datalayer::CreateCapabilities(
      _fbb,
      _bulkMax,
      _multiRegister,
      _maximumMessageSize);
}

inline const comm::datalayer::Capabilities *GetCapabilities(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::Capabilities>(buf);
}

inline const comm::datalayer::Capabilities *GetSizePrefixedCapabilities(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::Capabilities>(buf);
}

inline Capabilities *GetMutableCapabilities(void *buf) {
  return ::flatbuffers::GetMutableRoot<Capabilities>(buf);
}

inline comm::datalayer::Capabilities *GetMutableSizePrefixedCapabilities(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::Capabilities>(buf);
}

inline bool VerifyCapabilitiesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::Capabilities>(nullptr);
}

inline bool VerifySizePrefixedCapabilitiesBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::Capabilities>(nullptr);
}

inline void FinishCapabilitiesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::Capabilities> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedCapabilitiesBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::Capabilities> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::CapabilitiesT> UnPackCapabilities(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::CapabilitiesT>(GetCapabilities(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::CapabilitiesT> UnPackSizePrefixedCapabilities(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::CapabilitiesT>(GetSizePrefixedCapabilities(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_CAPABILITIES_COMM_DATALAYER_H_
