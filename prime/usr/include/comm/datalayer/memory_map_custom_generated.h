// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MEMORYMAPCUSTOM_COMM_DATALAYER_H_
#define FLATBUFFERS_GENERATED_MEMORYMAPCUSTOM_COMM_DATALAYER_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 1 &&
              FLATBUFFERS_VERSION_REVISION == 4,
             "Non-compatible flatbuffers version included");

#include "metadata_generated.h"

namespace comm {
namespace datalayer {

struct VariableCustom;
struct VariableCustomBuilder;
struct VariableCustomT;

struct MemoryMapCustom;
struct MemoryMapCustomBuilder;
struct MemoryMapCustomT;

struct VariableCustomT : public ::flatbuffers::NativeTable {
  typedef VariableCustom TableType;
  std::string name{};
  std::string bitoffsetReference{};
  uint32_t bitoffset = 0;
  uint32_t bitsize = 0;
  std::string type{};
  std::unique_ptr<comm::datalayer::MetadataT> metadata{};
  VariableCustomT() = default;
  VariableCustomT(const VariableCustomT &o);
  VariableCustomT(VariableCustomT&&) FLATBUFFERS_NOEXCEPT = default;
  VariableCustomT &operator=(VariableCustomT o) FLATBUFFERS_NOEXCEPT;
};

struct VariableCustom FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef VariableCustomT NativeTableType;
  typedef VariableCustomBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_BITOFFSETREFERENCE = 6,
    VT_BITOFFSET = 8,
    VT_BITSIZE = 10,
    VT_TYPE = 12,
    VT_METADATA = 14
  };
  /// Name of the variable
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const VariableCustom * const o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  /// Name of a variable in the memory map to reference to
  const ::flatbuffers::String *bitoffsetReference() const {
    return GetPointer<const ::flatbuffers::String *>(VT_BITOFFSETREFERENCE);
  }
  ::flatbuffers::String *mutable_bitoffsetReference() {
    return GetPointer<::flatbuffers::String *>(VT_BITOFFSETREFERENCE);
  }
  /// Offset (in bits) of variable in memory additional to bitoffsetReference
  uint32_t bitoffset() const {
    return GetField<uint32_t>(VT_BITOFFSET, 0);
  }
  bool mutate_bitoffset(uint32_t _bitoffset = 0) {
    return SetField<uint32_t>(VT_BITOFFSET, _bitoffset, 0);
  }
  /// Size (in bits) of variable in memory
  uint32_t bitsize() const {
    return GetField<uint32_t>(VT_BITSIZE, 0);
  }
  bool mutate_bitsize(uint32_t _bitsize = 0) {
    return SetField<uint32_t>(VT_BITSIZE, _bitsize, 0);
  }
  /// type information
  const ::flatbuffers::String *type() const {
    return GetPointer<const ::flatbuffers::String *>(VT_TYPE);
  }
  ::flatbuffers::String *mutable_type() {
    return GetPointer<::flatbuffers::String *>(VT_TYPE);
  }
  /// metadata of the variable (optional)
  const comm::datalayer::Metadata *metadata() const {
    return GetPointer<const comm::datalayer::Metadata *>(VT_METADATA);
  }
  comm::datalayer::Metadata *mutable_metadata() {
    return GetPointer<comm::datalayer::Metadata *>(VT_METADATA);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_BITOFFSETREFERENCE) &&
           verifier.VerifyString(bitoffsetReference()) &&
           VerifyField<uint32_t>(verifier, VT_BITOFFSET, 4) &&
           VerifyField<uint32_t>(verifier, VT_BITSIZE, 4) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_METADATA) &&
           verifier.VerifyTable(metadata()) &&
           verifier.EndTable();
  }
  VariableCustomT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(VariableCustomT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<VariableCustom> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const VariableCustomT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct VariableCustomBuilder {
  typedef VariableCustom Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(VariableCustom::VT_NAME, name);
  }
  void add_bitoffsetReference(::flatbuffers::Offset<::flatbuffers::String> bitoffsetReference) {
    fbb_.AddOffset(VariableCustom::VT_BITOFFSETREFERENCE, bitoffsetReference);
  }
  void add_bitoffset(uint32_t bitoffset) {
    fbb_.AddElement<uint32_t>(VariableCustom::VT_BITOFFSET, bitoffset, 0);
  }
  void add_bitsize(uint32_t bitsize) {
    fbb_.AddElement<uint32_t>(VariableCustom::VT_BITSIZE, bitsize, 0);
  }
  void add_type(::flatbuffers::Offset<::flatbuffers::String> type) {
    fbb_.AddOffset(VariableCustom::VT_TYPE, type);
  }
  void add_metadata(::flatbuffers::Offset<comm::datalayer::Metadata> metadata) {
    fbb_.AddOffset(VariableCustom::VT_METADATA, metadata);
  }
  explicit VariableCustomBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<VariableCustom> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<VariableCustom>(end);
    fbb_.Required(o, VariableCustom::VT_NAME);
    return o;
  }
};

inline ::flatbuffers::Offset<VariableCustom> CreateVariableCustom(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::String> bitoffsetReference = 0,
    uint32_t bitoffset = 0,
    uint32_t bitsize = 0,
    ::flatbuffers::Offset<::flatbuffers::String> type = 0,
    ::flatbuffers::Offset<comm::datalayer::Metadata> metadata = 0) {
  VariableCustomBuilder builder_(_fbb);
  builder_.add_metadata(metadata);
  builder_.add_type(type);
  builder_.add_bitsize(bitsize);
  builder_.add_bitoffset(bitoffset);
  builder_.add_bitoffsetReference(bitoffsetReference);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<VariableCustom> CreateVariableCustomDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    const char *bitoffsetReference = nullptr,
    uint32_t bitoffset = 0,
    uint32_t bitsize = 0,
    const char *type = nullptr,
    ::flatbuffers::Offset<comm::datalayer::Metadata> metadata = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto bitoffsetReference__ = bitoffsetReference ? _fbb.CreateString(bitoffsetReference) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  return comm::datalayer::CreateVariableCustom(
      _fbb,
      name__,
      bitoffsetReference__,
      bitoffset,
      bitsize,
      type__,
      metadata);
}

::flatbuffers::Offset<VariableCustom> CreateVariableCustom(::flatbuffers::FlatBufferBuilder &_fbb, const VariableCustomT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct MemoryMapCustomT : public ::flatbuffers::NativeTable {
  typedef MemoryMapCustom TableType;
  std::string name{};
  std::vector<std::unique_ptr<comm::datalayer::VariableCustomT>> variables{};
  MemoryMapCustomT() = default;
  MemoryMapCustomT(const MemoryMapCustomT &o);
  MemoryMapCustomT(MemoryMapCustomT&&) FLATBUFFERS_NOEXCEPT = default;
  MemoryMapCustomT &operator=(MemoryMapCustomT o) FLATBUFFERS_NOEXCEPT;
};

struct MemoryMapCustom FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MemoryMapCustomT NativeTableType;
  typedef MemoryMapCustomBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_VARIABLES = 6
  };
  /// Name of the custom memory map
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  ::flatbuffers::String *mutable_name() {
    return GetPointer<::flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const MemoryMapCustom * const o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  /// Array of custom variables
  const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::VariableCustom>> *variables() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::VariableCustom>> *>(VT_VARIABLES);
  }
  ::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::VariableCustom>> *mutable_variables() {
    return GetPointer<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::VariableCustom>> *>(VT_VARIABLES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_VARIABLES) &&
           verifier.VerifyVector(variables()) &&
           verifier.VerifyVectorOfTables(variables()) &&
           verifier.EndTable();
  }
  MemoryMapCustomT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MemoryMapCustomT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<MemoryMapCustom> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapCustomT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MemoryMapCustomBuilder {
  typedef MemoryMapCustom Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(MemoryMapCustom::VT_NAME, name);
  }
  void add_variables(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::VariableCustom>>> variables) {
    fbb_.AddOffset(MemoryMapCustom::VT_VARIABLES, variables);
  }
  explicit MemoryMapCustomBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MemoryMapCustom> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MemoryMapCustom>(end);
    fbb_.Required(o, MemoryMapCustom::VT_NAME);
    return o;
  }
};

inline ::flatbuffers::Offset<MemoryMapCustom> CreateMemoryMapCustom(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<comm::datalayer::VariableCustom>>> variables = 0) {
  MemoryMapCustomBuilder builder_(_fbb);
  builder_.add_variables(variables);
  builder_.add_name(name);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MemoryMapCustom> CreateMemoryMapCustomDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    std::vector<::flatbuffers::Offset<comm::datalayer::VariableCustom>> *variables = nullptr) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto variables__ = variables ? _fbb.CreateVectorOfSortedTables<comm::datalayer::VariableCustom>(variables) : 0;
  return comm::datalayer::CreateMemoryMapCustom(
      _fbb,
      name__,
      variables__);
}

::flatbuffers::Offset<MemoryMapCustom> CreateMemoryMapCustom(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapCustomT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline VariableCustomT::VariableCustomT(const VariableCustomT &o)
      : name(o.name),
        bitoffsetReference(o.bitoffsetReference),
        bitoffset(o.bitoffset),
        bitsize(o.bitsize),
        type(o.type),
        metadata((o.metadata) ? new comm::datalayer::MetadataT(*o.metadata) : nullptr) {
}

inline VariableCustomT &VariableCustomT::operator=(VariableCustomT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(bitoffsetReference, o.bitoffsetReference);
  std::swap(bitoffset, o.bitoffset);
  std::swap(bitsize, o.bitsize);
  std::swap(type, o.type);
  std::swap(metadata, o.metadata);
  return *this;
}

inline VariableCustomT *VariableCustom::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<VariableCustomT>(new VariableCustomT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void VariableCustom::UnPackTo(VariableCustomT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = bitoffsetReference(); if (_e) _o->bitoffsetReference = _e->str(); }
  { auto _e = bitoffset(); _o->bitoffset = _e; }
  { auto _e = bitsize(); _o->bitsize = _e; }
  { auto _e = type(); if (_e) _o->type = _e->str(); }
  { auto _e = metadata(); if (_e) { if(_o->metadata) { _e->UnPackTo(_o->metadata.get(), _resolver); } else { _o->metadata = std::unique_ptr<comm::datalayer::MetadataT>(_e->UnPack(_resolver)); } } else if (_o->metadata) { _o->metadata.reset(); } }
}

inline ::flatbuffers::Offset<VariableCustom> VariableCustom::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const VariableCustomT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateVariableCustom(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<VariableCustom> CreateVariableCustom(::flatbuffers::FlatBufferBuilder &_fbb, const VariableCustomT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const VariableCustomT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _fbb.CreateString(_o->name);
  auto _bitoffsetReference = _o->bitoffsetReference.empty() ? 0 : _fbb.CreateString(_o->bitoffsetReference);
  auto _bitoffset = _o->bitoffset;
  auto _bitsize = _o->bitsize;
  auto _type = _o->type.empty() ? 0 : _fbb.CreateString(_o->type);
  auto _metadata = _o->metadata ? CreateMetadata(_fbb, _o->metadata.get(), _rehasher) : 0;
  return comm::datalayer::CreateVariableCustom(
      _fbb,
      _name,
      _bitoffsetReference,
      _bitoffset,
      _bitsize,
      _type,
      _metadata);
}

inline MemoryMapCustomT::MemoryMapCustomT(const MemoryMapCustomT &o)
      : name(o.name) {
  variables.reserve(o.variables.size());
  for (const auto &variables_ : o.variables) { variables.emplace_back((variables_) ? new comm::datalayer::VariableCustomT(*variables_) : nullptr); }
}

inline MemoryMapCustomT &MemoryMapCustomT::operator=(MemoryMapCustomT o) FLATBUFFERS_NOEXCEPT {
  std::swap(name, o.name);
  std::swap(variables, o.variables);
  return *this;
}

inline MemoryMapCustomT *MemoryMapCustom::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<MemoryMapCustomT>(new MemoryMapCustomT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MemoryMapCustom::UnPackTo(MemoryMapCustomT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = name(); if (_e) _o->name = _e->str(); }
  { auto _e = variables(); if (_e) { _o->variables.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->variables[_i]) { _e->Get(_i)->UnPackTo(_o->variables[_i].get(), _resolver); } else { _o->variables[_i] = std::unique_ptr<comm::datalayer::VariableCustomT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->variables.resize(0); } }
}

inline ::flatbuffers::Offset<MemoryMapCustom> MemoryMapCustom::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapCustomT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMemoryMapCustom(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<MemoryMapCustom> CreateMemoryMapCustom(::flatbuffers::FlatBufferBuilder &_fbb, const MemoryMapCustomT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const MemoryMapCustomT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _name = _fbb.CreateString(_o->name);
  auto _variables = _o->variables.size() ? _fbb.CreateVector<::flatbuffers::Offset<comm::datalayer::VariableCustom>> (_o->variables.size(), [](size_t i, _VectorArgs *__va) { return CreateVariableCustom(*__va->__fbb, __va->__o->variables[i].get(), __va->__rehasher); }, &_va ) : 0;
  return comm::datalayer::CreateMemoryMapCustom(
      _fbb,
      _name,
      _variables);
}

inline const comm::datalayer::MemoryMapCustom *GetMemoryMapCustom(const void *buf) {
  return ::flatbuffers::GetRoot<comm::datalayer::MemoryMapCustom>(buf);
}

inline const comm::datalayer::MemoryMapCustom *GetSizePrefixedMemoryMapCustom(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<comm::datalayer::MemoryMapCustom>(buf);
}

inline MemoryMapCustom *GetMutableMemoryMapCustom(void *buf) {
  return ::flatbuffers::GetMutableRoot<MemoryMapCustom>(buf);
}

inline comm::datalayer::MemoryMapCustom *GetMutableSizePrefixedMemoryMapCustom(void *buf) {
  return ::flatbuffers::GetMutableSizePrefixedRoot<comm::datalayer::MemoryMapCustom>(buf);
}

inline bool VerifyMemoryMapCustomBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<comm::datalayer::MemoryMapCustom>(nullptr);
}

inline bool VerifySizePrefixedMemoryMapCustomBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<comm::datalayer::MemoryMapCustom>(nullptr);
}

inline void FinishMemoryMapCustomBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::MemoryMapCustom> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMemoryMapCustomBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<comm::datalayer::MemoryMapCustom> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<comm::datalayer::MemoryMapCustomT> UnPackMemoryMapCustom(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::MemoryMapCustomT>(GetMemoryMapCustom(buf)->UnPack(res));
}

inline std::unique_ptr<comm::datalayer::MemoryMapCustomT> UnPackSizePrefixedMemoryMapCustom(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<comm::datalayer::MemoryMapCustomT>(GetSizePrefixedMemoryMapCustom(buf)->UnPack(res));
}

}  // namespace datalayer
}  // namespace comm

#endif  // FLATBUFFERS_GENERATED_MEMORYMAPCUSTOM_COMM_DATALAYER_H_
